{"version":3,"file":"static/js/728.f264f663.chunk.js","mappings":"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","sources":["components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js"],"sourcesContent":["import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport \"./randomChar.scss\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport Spinner from \"../spinner/Spinner\";\nimport mjolnir from \"../../resources/img/mjolnir.png\";\n\nconst RandomChar = () => {\n  const [char, setChar] = useState(null);\n\n  const { loading, error, getCharacter, clearError } = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n    const timerId = setInterval(updateChar, 60000);\n\n    return () => {\n      clearInterval(timerId);\n    };\n  }, []);\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  const updateChar = () => {\n    clearError();\n    const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n    getCharacter(id).then(onCharLoaded);\n  };\n\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading ? <Spinner /> : null;\n  const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n  return (\n    <div className=\"randomchar\">\n      {errorMessage}\n      {spinner}\n      {content}\n      <div className=\"randomchar__static\">\n        <p className=\"randomchar__title\">\n          Random character for today!\n          <br />\n          Do you want to get to know him better?\n        </p>\n        <p className=\"randomchar__title\">Or choose another one</p>\n        <button onClick={updateChar} className=\"button button__main\">\n          <div className=\"inner\">try it</div>\n        </button>\n        <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n      </div>\n    </div>\n  );\n};\n\nconst View = ({ char }) => {\n  const { name, description, thumbnail, homepage, wiki } = char;\n  let imgStyle = { objectFit: \"cover\" };\n  if (\n    thumbnail ===\n    \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n  ) {\n    imgStyle = { objectFit: \"contain\" };\n  }\n\n  return (\n    <div className=\"randomchar__block\">\n      <img\n        src={thumbnail}\n        alt=\"Random character\"\n        className=\"randomchar__img\"\n        style={imgStyle}\n      />\n      <div className=\"randomchar__info\">\n        <p className=\"randomchar__name\">{name}</p>\n        <p className=\"randomchar__descr\">{description}</p>\n        <div className=\"randomchar__btns\">\n          <a href={homepage} className=\"button button__main\">\n            <div className=\"inner\">homepage</div>\n          </a>\n          <a href={wiki} className=\"button button__secondary\">\n            <div className=\"inner\">Wiki</div>\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RandomChar;\n","import React from \"react\";\nimport { useState, useEffect, useRef } from \"react\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport \"./charList.scss\";\n\nconst CharList = (props) => {\n  const [charList, setCharList] = useState([]);\n  const [newItemLoading, setNewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(210);\n  const [charEnded, setCharEnded] = useState(false);\n\n  const { loading, error, getAllCharacters } = useMarvelService();\n\n  useEffect(() => {\n    onRequest(offset, true);\n  }, []);\n\n  // componentDidMount() {\n  //   this.onRequest();\n  //   window.addEventListener(\"scroll\", this.loadMore);\n  // }\n\n  // componentWillUnmount() {\n  //   window.removeEventListener(\"scroll\", this.loadMore);\n  // }\n\n  const onRequest = (offset, initial) => {\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\n    getAllCharacters(offset).then(onCharListLoaded);\n  };\n\n  // loadMore = () => {\n  //   let scrollHeight = Math.max(\n  //     (document.documentElement.scrollHeight, document.body.scrollHeight)\n  //   );\n\n  //   if (\n  //     Math.floor(window.scrollY + document.documentElement.clientHeight) >=\n  //     scrollHeight\n  //   ) {\n  //     this.onRequest(this.state.offset);\n  //   }\n  // };\n\n  const onCharListLoaded = (newCharList) => {\n    let ended = false;\n    if (newCharList.length < 9) {\n      ended = true;\n    }\n\n    setCharList((charList) => [...charList, ...newCharList]);\n    setNewItemLoading((newItemLoading) => false);\n    setOffset((offset) => offset + 9);\n    setCharEnded((charEnded) => ended);\n  };\n\n  const itemRefs = useRef([]);\n\n  const focusOnItem = (id) => {\n    itemRefs.current.forEach((item) =>\n      item.classList.remove(\"char__item_selected\")\n    );\n    itemRefs.current[id].classList.add(\"char__item_selected\");\n    itemRefs.current[id].focus();\n  };\n\n  // Этот метод создан для оптимизации,\n  // чтобы не помещать такую конструкцию в метод render\n  function renderItems(arr) {\n    const items = arr.map((item, i) => {\n      let imgStyle = { objectFit: \"cover\" };\n      if (\n        item.thumbnail ===\n        \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n      ) {\n        imgStyle = { objectFit: \"unset\" };\n      }\n\n      return (\n        <li\n          className=\"char__item\"\n          tabIndex={0}\n          ref={(el) => (itemRefs.current[i] = el)}\n          key={item.id}\n          onClick={() => {\n            props.onCharSelected(item.id);\n            focusOnItem(i);\n          }}\n          onKeyDown={(e) => {\n            if (e.key === \" \" || e.key === \"Enter\") {\n              props.onCharSelected(item.id);\n              focusOnItem(i);\n            }\n          }}\n        >\n          <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n          <div className=\"char__name\">{item.name}</div>\n        </li>\n      );\n    });\n    // А эта конструкция вынесена для центровки спиннера/ошибки\n    return <ul className=\"char__grid\">{items}</ul>;\n  }\n\n  const items = renderItems(charList);\n\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading && !newItemLoading ? <Spinner /> : null;\n  // const content = !(loading || error) ? items : null;\n\n  return (\n    <div className=\"char__list\">\n      {errorMessage}\n      {spinner}\n      {items}\n      <button\n        className=\"button button__main button__long\"\n        disabled={newItemLoading}\n        style={{ display: charEnded ? \"none\" : \"block\" }}\n        onClick={() => onRequest(offset)}\n      >\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n};\n\nexport default CharList;\n","import React from \"react\";\nimport \"./skeleton.scss\";\n\nconst Skeleton = () => {\n  return (\n    <>\n      <p className=\"char__select\">\n        Please select a character to see information\n      </p>\n      <div className=\"skeleton\">\n        <div className=\"pulse skeleton__header\">\n          <div className=\"pulse skeleton__circle\"></div>\n          <div className=\"pulse skeleton__mini\"></div>\n        </div>\n        <div className=\"pulse skeleton__block\"></div>\n        <div className=\"pulse skeleton__block\"></div>\n        <div className=\"pulse skeleton__block\"></div>\n      </div>\n    </>\n  );\n};\n\nexport default Skeleton;\n","import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport Skeleton from \"../skeleton/Skeleton\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport \"./charInfo.scss\";\nimport { NavLink } from \"react-router-dom\";\n\nconst CharInfo = ({ charId }) => {\n  const [char, setChar] = useState(null);\n\n  const { loading, error, getCharacter, clearError } = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n\n    return () => {\n      // Очистка ресурсов, если необходимо\n    };\n  }, [charId]);\n\n  const updateChar = () => {\n    if (!charId) {\n      return;\n    }\n    clearError();\n    getCharacter(charId).then(onCharLoaded);\n  };\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  const skeleton = char || loading || error ? null : <Skeleton />;\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading ? <Spinner /> : null;\n  const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n  return (\n    <div className=\"char__info\">\n      {skeleton}\n      {errorMessage}\n      {spinner}\n      {content}\n    </div>\n  );\n};\n\nconst View = ({ char }) => {\n  const { name, description, thumbnail, homepage, wiki, comics } = char;\n\n  let imgStyle = { objectFit: \"cover\" };\n  if (\n    thumbnail ===\n    \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n  ) {\n    imgStyle = { objectFit: \"contain\" };\n  }\n\n  return (\n    <>\n      <div className=\"char__basics\">\n        <img src={thumbnail} alt={name} style={imgStyle} />\n        <div>\n          <div className=\"char__info-name\">{name}</div>\n          <div className=\"char__btns\">\n            <a href={homepage} className=\"button button__main\">\n              <div className=\"inner\">homepage</div>\n            </a>\n            <a href={wiki} className=\"button button__secondary\">\n              <div className=\"inner\">Wiki</div>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"char__descr\">{description}</div>\n      <div className=\"char__comics\">Comics:</div>\n      <ul className=\"char__comics-list\">\n        {comics.length > 0 ? null : \"There are no comics for this character\"}\n        {comics.slice(0, 10).map((item, i) => {\n          return (\n            <li key={i} className=\"char__comics-item\">\n              <NavLink to={`/comics/${item.resourceURI.substring(43)}`}>\n                {item.name}\n              </NavLink>\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nCharInfo.propTypes = {\n  charId: PropTypes.number,\n};\n\nexport default CharInfo;\n","import { React, Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  state = {\r\n    error: false,\r\n  };\r\n\r\n  // static getDerivedStateFromError(error) {\r\n  //   return { error: true };\r\n  // }\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    console.log(error, errorInfo);\r\n    this.setState({\r\n      error: true,\r\n    });\r\n  }\r\n  render() {\r\n    if (this.state.error) {\r\n      return <ErrorMessage />;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import { useState } from \"react\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport decoration from \"../../resources/img/vision.png\";\r\n\r\nconst MainPage = () => {\r\n  const [selectedChar, setChar] = useState(null);\r\n\r\n  const onCharSelected = (id) => {\r\n    setChar(id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ErrorBoundary>\r\n        <RandomChar />\r\n      </ErrorBoundary>\r\n      <div className=\"char__content\">\r\n        <ErrorBoundary>\r\n          <CharList onCharSelected={onCharSelected} />\r\n        </ErrorBoundary>\r\n        <ErrorBoundary>\r\n          <CharInfo charId={selectedChar} />\r\n        </ErrorBoundary>\r\n      </div>\r\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n"],"names":["View","_ref","char","name","description","thumbnail","homepage","wiki","imgStyle","objectFit","_jsxs","className","children","_jsx","src","alt","style","href","_useState","useState","_useState2","_slicedToArray","setChar","_useMarvelService","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","props","charList","setCharList","_useState3","_useState4","newItemLoading","setNewItemLoading","_useState5","_useState6","offset","setOffset","_useState7","_useState8","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","concat","_toConsumableArray","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","tabIndex","ref","el","onCharSelected","onKeyDown","e","key","renderItems","disabled","display","_Fragment","_ref2","comics","slice","NavLink","to","resourceURI","substring","charId","skeleton","Skeleton","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","args","Array","_key","call","apply","state","_createClass","value","errorInfo","console","log","this","setState","Component","selectedChar","RandomChar","CharList","CharInfo","decoration"],"sourceRoot":""}